application mathmo

import mobl::ui::generic

import mathLoader
import audioPlayer
import videoPlayer
import plot

screen root() { 
	header("Mathmo" )
	group {
		item(onclick={
			showMaths();
			}) {
			label("Show Maths")
		}
		item(onclick={playSound();}){
			label("Play audio")
		}
		item(onclick={showVideo();}){
			label("Show video")
		}
		item(onclick={plotGraph();}){
			label("Plot Graph")
		}
	}
}

screen showMaths() {
	
	header("Show maths") {
		script {
			renderMaths();
		}
		backButton()
		button("render", onclick = {
			renderMaths();
		})
	}
	group {
		var tex:Array<String> = [
			"$$y<x^2$$",
			"$$\\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}}{1+\\frac{e^{-8\\pi}} {1+\\ldots} } } }$$",
			"$$\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)$$",
			"$$\\begin{aligned}\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} & = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\   \\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\\\nabla \\cdot \\vec{\\mathbf{B}} & = 0 \\end{aligned}$$"
			]
		
		list(s in tex) {
			item(onclick = {renderMathsIn(event);}) {
				label(s) 
			}
		}
	}
}

screen playSound() {
	header("Play Audio") {
		backButton()
	}
	sound()
}

screen showVideo() {
		
	var myvid = $("#myvid")

	header("Big Bunny") {
		backButton()
	}
	group {
		item{
			video("myvid", "http://broken-links.com/tests/media/BigBuck.m4v")
		}
	}
	button("Play", onclick={ play("myvid"); })

}

style plotAreaStyle {
	width:250 px;
	height:250 px;
}

screen plotGraph() {
	header("Flot example") {
		backButton()
	}
	group {
		item{
			plot("plotArea", plotAreaStyle)
		}
	}
	button("Line Chart", onclick={ r=30; lineChart("plotArea", curves()); })
	button("Grow Range", onclick={ r = r+1; lineChart("plotArea", curves());})
}

var r:Num = 30;

function curves():[[[Num]]] 
{
	var domain = range(0-r,r+1);
	return [domain.map(square), domain.map(cube)];
}

function square(n:Num):[Num]
{
	n = n/10;
	return [n, n*n];
}

function cube(n:Num):[Num]
{
	n = n/10;
	return [n, n*n*n];
}
