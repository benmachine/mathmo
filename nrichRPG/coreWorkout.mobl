module nrichRPG::coreWorkout

import mobl
import ui
import mobl::ui::stylemixin
import nrichRPG::questionAnswer
import mathJAX
import plot

style helpStyle {
	background-color:#FFFFFF;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	font-size: 20px;
	color: #666666;
	padding:10px;
	word-break: normal;
}

style deleteStyle {
	//background-color:#8888FF;
	padding:10px;
	padding-right: 2px;
	float: right;
}

style headerLogo {
	padding:0px;
	margin: 4px;
	border: #888888 1px solid;
}

var qCount:Num = 0; //QA.all().count()
var tickCount:Num = 0; //QA.all().filter("done","=",true).count()

function updateCounts():void
{
	qCount = QA.all().count();
	tickCount = QA.all().filter("done","=",true).count();
	log("qCount = " + qCount + " tickCount = " + tickCount);
}


/* 
control coreWorkoutHome() {
	
	
	script {
		updateCounts();
	}
	//
 	//header("Mathmo Core") {
	//	image("icon.png", 35, 35, valign="middle", align="left", style=headerLogo)
	//	button("Add", onclick={addQA(); updateCounts();})
	//}
	//
	group {
		when(qCount == 0) {
			item(helpStyle) {
				html("Your personal workout. Touch [Add] to create a question on one of your chosen topics. Your questions will be preserved until you delete them.")
			}
		}
		list(qa in QA.all() order by number asc) {
			item() { 
				checkBox(qa.done, label = "" + qa.number + ". " + qa.topic)
			}
		}
		
		when(qCount > 0) {
			button("Delete ticked", onclick = {
				var ticked:Collection<QA> = QA.all().filter("done", "=", true);
				foreach(t in ticked) {
					remove(t);
				}
				updateCounts();
			})
			button("Delete all", onclick = {
				QA.all().destroyAll();
				updateCounts();
			})
		}
	}
}
*/

function clearAllQ():void
{
	QA.all().destroyAll();
}

function randomQ(n:Num, topicId:Num):void
{
	foreach(i in range(0,n)) {
		makeQA(topicId);
	}
}

resource icon.png

control addQA() {
	group {
		/*
		item(onclick = {makeQA(qa,1000); screen return;}) {
			image("icon.png", 20, 20, align="left", valign="middle")
			label("Random topic")
		}
		*/
		item(onclick = {addAlgebra(); screen return;}) {
			label("+Algebraic")
		}
		item(onclick = {addCurveSketch(); screen return;}) {
			label("+Curve sketching")
		}
		item(onclick = {addGeometry(); screen return;}) {
			label("+Geometry")
		}
		item(onclick = {addSequencesAndSeries(); screen return;}) {
			label("+Sequences & series")
		}
		item(onclick = {addVectors(); screen return;}) {
			label("+Vectors")
		}
		item(onclick = {addDifferentiation(); screen return;}) {
			label("+Differentiation")
		}
		item(onclick = {addIntegration(); screen return;}) {
			label("+Integration")
		}
		item(onclick = {addDifferentialEquations(); screen return;}) {
			label("+Differential equations")
		}
	}
}
 
screen addAlgebra() {
	var qa = QA()
	header("Algebraic") {
		backButton()
	}
	group {
		item(onclick = {makeQA(10); alert("Quadratic Q added"); screen return;}) {
         	label("+Quadratic equations")
        }
		item(onclick = {makeQA(11); alert("Completing the Square Q added"); screen return;}) {
         	label("+Completing the square")
        }
		item(onclick = {makeQA(7); alert("Ineqalities Q added"); screen return;}) {
         	label("+Inequalities")
        }
		item(onclick = {makeQA(9); alert("Factor theorem Q added"); screen return;}) {
         	label("+Factor theorem")
        }
		item(onclick = {makeQA(1); alert("Partial fraction Q added"); screen return;}) {
         	label("+Partial fractions")
        }
		item(onclick = {makeQA(30); alert("Powers Q added"); screen return;}) {
         	label("+Powers")
        }
		item(onclick = {makeQA(13);  alert("Logarithm Q added");screen return;}) {
         	label("+Logarithms")
        }
		item(onclick = {makeQA(17); alert("Trig equation Q added"); screen return;}) {
         	label("+Trig equations")
        }
	}
}

screen addCurveSketch() {
	header("Curve Sketching") {
		backButton()
	}
	group {
		item(onclick = {makeQA(24); alert("Modulus Q added"); screen return;}) {
         	label("+Modulus function")
        }
		item(onclick = {makeQA(25); alert("Transformations of functions Q added"); screen return;}) {
         	label("Transformations of functions")
        }
		item(onclick = {makeQA(26); alert("Composition of functions Q added"); screen return;}) {
         	label("Composition of functions")
        }
		item(onclick = {makeQA(270); alert("Implicit functions Q added"); screen return;}) {
         	label("Implicit functions")
        }
		item(onclick = {makeQA(27); alert("Parametric functions Q added"); screen return;}) {
         	label("Parametric functions")
        }
	}
}

screen addGeometry() {
	header("+Geometry") {
		backButton()
	}
	group {
		item(onclick = {makeQA(15); alert("Triangles Q added"); screen return;}) {
         	label("+Triangles")
        }
		item(onclick = {makeQA(16); alert("Circles Q added"); screen return;}) {
         	label("+Circles")
        }
		item(onclick = {makeQA(6); alert("3D lines Q added");  screen return;}) {
         	label("+ 3D lines")
        }
	}
}

screen addSequencesAndSeries() { 
	header("+Sequences and Series") {
		backButton()
	}
	group {
		item(onclick = {makeQA(8);  alert("Arithmetic Progressions Q added"); screen return;}) {
         	label("+Arithmetic progressions")
        }
		item(onclick = {makeQA(12); alert("Binomial Expansion Q added");  screen return;}) {
         	label("+Binomial expansion")
        }
		item(onclick = {makeQA(23);  alert("Geometric Progression Q added"); screen return;}) {
         	label("+Geometric progressions")
        }
		item(onclick = {makeQA(2); alert("Binomial theorem Q added");  screen return;}) {
         	label("+Binomial theorem")
        }
    }
}

screen addVectors() {
	header("+Vectors") {
		backButton()
	}
	group {
		item(onclick = {makeQA(5);  alert("Scalar product Q added"); screen return;}) {
         	label("+Scalar products")
        }
		item(onclick = {makeQA(18);  alert("Vector equation of lines Q added"); screen return;}) {
         	label("+Vector equation of lines")
        }
    }
}

screen addDifferentiation() {
	header("+Differentiation") {
		backButton()
	}
	group {
		item(onclick = {makeQA(14);  alert("Stationary points Q added"); screen return;}) {
         	label("+Stationary points")
        }
		item(onclick = {makeQA(20);  alert("Chain rule Q added"); screen return;}) {
         	label("+Chain rule")
        }
		item(onclick = {makeQA(21);  alert("Product rule Q added"); screen return;}) {
         	label("+Product rule")
        }
		item(onclick = {makeQA(22);  alert("Quotient rule Q added"); screen return;}) {
         	label("+Quotient rule")
        }
		item(onclick = {makeQA(19); screen return;}) {
         	label("+Implicit differentiation")
        }
    }	
}

screen addIntegration() {
	header("+Integration") {
		backButton()
	}
	group {
		item(onclick = {makeQA(28);  alert("Integration Q added"); screen return;}) {
         	label("+Integration")
        }
		item(onclick = {makeQA(3);  alert("Polynomial integration Q added"); screen return;}) {
         	label("+Polynomial integration")
        }
		item(onclick = {makeQA(4);  alert("Trig integration Q added"); screen return;}) {
         	label("+Trig integration")
        }
    }	
}

screen addDifferentialEquations() {
	header("+Diff equations") {
		backButton()
	}
	group {
		item(onclick = {makeQA(29);  alert("Differential equations Q added"); screen return;}) {
         	label("+Diff equations")
        }
    }	
}

style questionStyle {
	background-color:#FFFFFF;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	font-size: 17px;
	color: #000000;
	padding:10px;
	word-break: normal;
}

style answerStyle {
	background-color:#F8F8F8;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	border-bottom-width:0px;
	font-size: 17px;
	color: #666666;
	padding:10px;
	word-break: normal;
}

style plotStyle {
	width : 300px;
	height : 300px;
}


style topicLabelStyle {
	padding:20px;
	width:100%;
	height: 100%;
	color:#666;
}

function renderQA(qa:QA):void {
	sleep(100);
	renderMaths();
	if(qa.done && qa.answer == "%GRAPH%") {
		var jsonData:JSON = JSON.parse(qa.plotData);
		lineChart("corePlotArea", jsonData);
	}
}


style panelHeaderStyle {
  //backgroundGradientMixin($baseColor, rgb($baseColor.r~40, $baseColor.g~40, $baseColor.b~40));
  padding: 12px;
  height: 2.3em;
  font-size: 1em;
  line-height: 2.3em;
  font-weight: bold;
  text-align: center;
  //text-shadow: #477 0px 1px 1px;
  color: black;
  font-weight: bold;
  margin: 0;
  z-index: 2;
}

style panelHeaderContainerStyle {
  width: 250px;
  margin-left: -125px;
  //border:red 1px solid;
  position: absolute;
  left: 50%;
}

style panelHeaderTextStyle {
    //border:orange 1px solid;
	width:250px;
}

control panelHeader(text : String, onclick : Callback = null) {
  <div class=panelHeaderStyle onclick=onclick>
    <div class=panelHeaderContainerStyle><div databind=text class=panelHeaderTextStyle/></div>
    elements()
  </div>
}

control showQA(qa:QA) {
	panelHeader(qa.topic.toLowerCase()) {
		script{
			renderQA(qa);
		}
	}
	group {
		item(questionStyle, onclick={renderMaths();}, hideArrow=true) {
			html("Q" + qa.number + ". " + qa.question)
		}
		item() {
			block(answerStyle) {
				checkBox(qa.done, "Check answer", onchange = {
					renderQA(qa);
				})
			}
			when(qa.done) {
				block(answerStyle) {
					when(qa.answer != "%GRAPH%") {
						label("A" + qa.number + ". ")
						html(qa.answer)
					}
					else {
						label("A" + qa.number + ". ")
						plot("corePlotArea", plotStyle)
					}
				}
				block(answerStyle) {
					label("Did you agree?")
					sideButton("Yes", onclick={qa.correct=true;reload();})
					sideButton("No", onclick={qa.correct=false;reload();})
				}
			}
		}
	}
}

external sync function randomCoreQA(topic:String):Array<String>

external sync function makeProblem(qid:Num):Array<String>


var max:Num = 0;


function makeQA(n:Num):void {
	var qa = QA();
	var qas:Collection<QA> = QA.all();
	foreach(item in qas) {
		max = Math.max(max, item.number);
	}
	qa.number = max + 1;
	var q_and_A:Array<String> = makeProblem(n);
	qa.question = q_and_A[0];
	qa.answer = q_and_A[1];
	qa.topic = q_and_A[2];
	if(q_and_A.length > 3) {
		qa.plotData = q_and_A[3];
	}
	qa.done = false;
	add(qa);
}

<javascript>
	__ns.makeProblem = function(n) {
	    if(n === 1000)
	    {
	        n=1+Math.floor(Math.random()*29);
			n=n;
	    }
	
		if(n === 100)
		    {
		        n=pickrand(10, 11, 7, 9, 1, 30, 13, 17);
		    }
		
		if(n === 200)
		    {
		        n=pickrand(24, 25, 26, 27, 270);
		    }
		
		if(n === 300)
		    {
		        n=pickrand(15,16,6);
		    }
		if(n === 400)
		    {
		        n=pickrand(8, 12, 23, 2);
		    }
		if(n === 500)
		    {
		        n=pickrand(5, 18);
		    }
		if(n === 600)
		    {
		        n=pickrand(14,20,21,22,19);
		    }
		if(n === 700)
		    {
		        n=pickrand(28,3,4);
		    }
		
	    switch (n)
	    {
	        case 1:
	            var qa=makePartial();
	   			qa.push("Partial fractions");
	        break;
	        
	        case 2:
	            var qa=makeBinomial2();
	   			qa.push("Binomial theorem");
	        break;
	        
	        case 3:
	            var qa=makePolyInt();
	   			qa.push("Polynomial integration");
	        break;
	        
	        case 4:
	            var qa=makeTrigInt();
	   			qa.push("Trig integration");
	        break;
	        
	        case 5:
	            var qa=makeVector();
	   			qa.push("Scalar products");
	        break;
	        
	        case 6:
	            var qa=makeLines();
	   			qa.push("3D Lines");
	        break;
	        
	        case 7:
	            var qa=makeIneq();
	   			qa.push("Inequalities");
	        break;
	        
	        case 8:
	            var qa=makeAP();
	   			qa.push("Arithmetic progressions");
	        break;
	        
	        case 9:
	            var qa=makeFactor();
	   			qa.push("Factor theorem");
	        break;
	        
	        case 10:
	            var qa=makeQuadratic();
	   			qa.push("Quadratics");
	        break;
	        
	        case 11:
	            var qa=makeComplete();
	   			qa.push("Completing the square");
	        break;
	        
	        case 12:
	            var qa=makeBinExp();
	   			qa.push("Binomial expansion");
	        break;
	        
	        case 13:
	            var qa=makeLog();
	   			qa.push("Logarithms");
	        break;
	        
	        case 14:
	            var qa=makeStationary();
	   			qa.push("Stationary points");
	        break;
	        
	        case 15:
	            var qa=makeTriangle();
	   			qa.push("Triangles");
	        break;
	        
	        case 16:
	            var qa=makeCircle();
	   			qa.push("Circles");
	        break;
	        
	        case 17:
	            var qa=makeSolvingTrig();
	   			qa.push("Trig equations");
	        break;
	        
	        case 18:
	            var qa=makeVectorEq();
	   			qa.push("Vector equations");
	        break;
	        
	        case 19:
	            var qa=makeImplicit();
	   			qa.push("Implicit differentiation");
	        break;
	        
	        case 20:
	            var qa=makeChainRule();
	   			qa.push("The chain rule");
	        break;
	        
	        case 21:
	            var qa=makeProductRule();
	   			qa.push("The product rule");
	        break;
	        
	        case 22:
	            var qa=makeQuotientRule();
	   			qa.push("The quotient rule");
	        break;
	        
	        case 23:
	            var qa=makeGP();
	   			qa.push("Geometric progressions");
	        break;
	        
	        case 24:
	            var qa=makeModulus();
	   			qa.push("Modulus function");
	        break;
	        
	        case 25:
	            var qa=makeTransformation();
	   			qa.push("Transformations of functions");
	        break;
	        
	        case 26:
	            var qa=makeComposition();
	   			qa.push("Composition of functions");
	        break;
	        
	        case 27:
	            var qa=makeParametric();
	   			qa.push("Parametric functions");
	        break;
	
	        case 270:
	            var qa=makeImplicitFunction();
	   			qa.push("Implicit functions");
	        break;
	        
	        case 28:
	            var qa=makeIntegration();
	   			qa.push("Integration");
	        break;
	        
	        case 29:
	            var qa=makeDE();
	   			qa.push("Differential equations");
	        break;
	        
	        case 30:
	            var qa=makePowers();
	   			qa.push("Powers");
	        break;
	        
	        default:
	            alert("invalid qid" + n);
	        break;
	    }
	    return qa;
	};
</javascript>
