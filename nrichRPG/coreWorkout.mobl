module nrichRPG::coreWorkout

import mobl
import ui
import mobl::ui::stylemixin
import nrichRPG::questionAnswer
import mathJAX
import plot

style helpStyle {
	background-color:#FFFFFF;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	font-size: 20px;
	color: #666666;
	padding:10px;
}

style deleteStyle {
	//background-color:#8888FF;
	padding:10px;
	padding-right: 2px;
	float: right;
}

style headerLogo {
	padding:0px;
	margin: 4px;
	border: #888888 1px solid;
}

var qCount:Num = 0; //QA.all().count()
var tickCount:Num = 0; //QA.all().filter("done","=",true).count()

function updateCounts():void
{
	qCount = QA.all().count();
	tickCount = QA.all().filter("done","=",true).count();
	log("qCount = " + qCount + " tickCount = " + tickCount);
}

function clearAllQ():void
{
	QA.all().destroyAll();
}


function randomQ(n:Num, topicCode:String):void
{
	var keys:[String] = topicMapForId(topicCode).keys();
	foreach(i in range(0,n)) {
		var r:Num = Math.floor(keys.length*Math.random());
		var tid:String = keys[r]; 
		makeQA(tid);
	}
}


resource icon.png

control addQA() {
	group {

		item(onclick = {addAlgebra();}) {
			label("+Algebraic")
		}
		item(onclick = {addCurveSketch();}) {
			label("+Curve sketching")
		}
		item(onclick = {addGeometry();}) {
			label("+Geometry")
		}
		item(onclick = {addSequencesAndSeries();}) {
			label("+Sequences & series")
		}
		item(onclick = {addVectors();}) {
			label("+Vectors")
		}
		item(onclick = {addDifferentiation();}) {
			label("+Differentiation")
		}
		item(onclick = {addIntegration();}) {
			label("+Integration")
		}
		item(onclick = {addDifferentialEquations();}) {
			label("+Differential equations")
		}
	}
}

function topicMapForId(tid:String):Map<String,String> {
	var map:Map<String,String> = Map<String,String>();
	if(tid.indexOf("C") == 0)
		initCoreTopicMap(map);
	else if(tid.indexOf("F") == 0)
		initFurtherTopicMap(map);
	else if(tid.indexOf("S") == 0)
		initStatsTopicMap(map);
	else
		alert("invalid topi id "+tid);
	return map;
}

function topicName(tid:String):String {
	return topicMapForId(tid).get(tid);
}

function topicAdded(tid:String):void {
	if(makeQA(tid) != null)
		alert(topicName(tid) + " added");
}

control topicLabel(tid:String) {
	var map:Map<String,String> = topicMapForId(tid)
	label("+" + map.get(tid))
}

control topicItem(tid:String) {
	item(onclick = {topicAdded(tid);}) {
     	topicLabel(tid)
    }
}

screen addAlgebra() {
	var qa = QA()
	header("Algebraic") {
		backButton()
	}
	group {
		topicItem("C11")
		topicItem("C7")
		topicItem("C9")
		topicItem("C1")
		topicItem("C30")
		topicItem("C13")
		topicItem("C17")
	}
}

screen addCurveSketch() {
	header("Curve Sketching") {
		backButton()
	}
	group {
		topicItem("C24")
		topicItem("C25")
		topicItem("C26")
		topicItem("C270")
		topicItem("C27")
	}
}

screen addGeometry() {
	header("+Geometry") {
		backButton()
	}
	group {
		topicItem("C15")
		topicItem("C16")
		topicItem("C6")
	}
}

screen addSequencesAndSeries() { 
	header("+Sequences and Series") {
		backButton()
	}
	group {
		topicItem("C8")
		topicItem("C12")
		topicItem("C23")
		topicItem("C2")
    }
}

screen addVectors() {
	header("+Vectors") {
		backButton()
	}
	group {
		topicItem("C5")
		topicItem("C18")
    }
}

screen addDifferentiation() {
	header("+Differentiation") {
		backButton()
	}
	group {
		topicItem("C14")
		topicItem("C20")
		topicItem("C21")
		topicItem("C22")
		topicItem("C19")
    }	
}

screen addIntegration() {
	header("+Integration") {
		backButton()
	}
	group {
		topicItem("C28")
		topicItem("C3")
		topicItem("C4")
    }	
}

screen addDifferentialEquations() {
	header("+Diff equations") {
		backButton()
	}
	group {
		topicItem("C29")
    }	
}

/* Start of Core+ */
control addQAPlus() {
	group {
		topicItem("F1")
		topicItem("F2")
		//topicItem("F3")
		topicItem("F3a")
		topicItem("F4")
		topicItem("F5")
		topicItem("F6")
		topicItem("F7")
		topicItem("F8")
		topicItem("F9")
		topicItem("F10")
		topicItem("F11")
		topicItem("F12")
		topicItem("F13")
	}
}

/* Start of Core+ */
control addQAStats() {
	group {
		topicItem("S1")
		topicItem("S2")
		topicItem("S3")
		topicItem("S4")
		topicItem("S5")
		topicItem("S6")
	}
}

style questionStyle {
	background-color:#FFFFFF;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	font-size: 17px;
	color: #000000;
	padding:10px;
}

style answerStyle {
	background-color:#F0F0F0;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	border-bottom-width:0px;
	font-size: 17px;
	color: #666666;
	padding:10px;
}

style mixin answerDisplayStyleMixin($bg, $border) {
	background-color: $bg;
	border: 2px solid $border;
	font-size: 17px;
	color: #666666;
	padding: 10px;
	white-space: normal;
}

style agreeStyle {
	answerDisplayStyleMixin(#F0FFF0, #CCFFCC);
}

style disagreeStyle {
	answerDisplayStyleMixin(#FFF0F0, #FFCCCC);
}

style plotStyle {
	width : 270px;
	height : 270px;
}


style topicLabelStyle {
	padding:20px;
	width:100%;
	height: 100%;
	color:#666;
}


style panelHeaderStyle {
  //backgroundGradientMixin($baseColor, rgb($baseColor.r~40, $baseColor.g~40, $baseColor.b~40));
  padding: 12px;
  height: 2.3em;
  font-size: 1em;
  line-height: 2.3em;
  font-weight: bold;
  text-align: left;
  //text-shadow: #477 0px 1px 1px;
  color: black;
  font-weight: bold;
  margin: 0;
  z-index: 2;
}

style panelHeaderContainerStyle {
  width: 200px;
  position: absolute;
}

style panelHeaderTextStyle {
	width:160px;
	white-space:nowrap;
	text-overflow:ellipsis;
}

style panelHeaderStyle sideButtonStyle {
	z-index: 3;
}

control panelHeader(text : String, onclick : Callback = null) {
  <div class=panelHeaderStyle onclick=onclick>
    <div class=panelHeaderContainerStyle><div databind=text class=panelHeaderTextStyle/></div>
    elements()
  </div>
}


function renderQA(qa:QA):String {
	renderMaths();
	if(qa.done && qa.answer == "%GRAPH%") {
		var jsonData:JSON = JSON.parse(qa.plotData);
		lineChart("corePlotArea", jsonData);
	}
	return "";
}

control answerBlock(qa:QA) {
	when(qa.correct) {
		block(agreeStyle) {
			when(qa.answer != "%GRAPH%") {
				label("A" + qa.number + ". ")
				html(qa.answer)
			}
			else {
				label("A" + qa.number + ". ")
				plot("corePlotArea", plotStyle)
				<span style="display:none">
					html(renderQA(qa))
				</span>
			}
		}
	}
	else {
		block(disagreeStyle) {
			when(qa.answer != "%GRAPH%") {
				label("A" + qa.number + ". ")
				html(qa.answer)
			}
			else {
				label("A" + qa.number + ". ")
				plot("corePlotArea", plotStyle)
				<span style="display:none">
					html(renderQA(qa))
				</span>
			}
		}
	}
	block(answerStyle) {
		<span style="display:none">
			html(renderQA(qa))
		</span>
		label("Did you agree?")
		sideButton("Yes", onclick={qa.correct=true;})
		sideButton("No", onclick={qa.correct=false;})
	}	
}

function nextQA(qa:QA):QA
{
	var n:Num = qa.number;
	var qa2:QA = (QA.all() where number > qa.number).one();
//	if(qa2 == null)
//		return QA.all().one();
	return qa2;
}



control showQA(qa:QA) {
	panelHeader(topicName(qa.topic), onclick={renderMaths();}) {
		sideButton("Del", onclick={
			var qa2:QA = nextQA(qa);
     		 remove(qa);
			if (qa2 == null) {
			  hideCurrent();
			} else {
		      	qa = qa2;
		      	renderQA(qa);
	      	}
/*	      
			var qa2:QA = nextQA(qa);
			remove(qa);
			qa = qa2;
			renderQA(qa);
*/
		}, style=delStyle, pushedStyle=delPushedStyle)
		
		sideButton("New", onclick={
			var qa2:QA = makeQA(qa.topic);
			if(qa2 != null)
			{
				var qnum:Num = qa.number;
				remove(qa);
				qa = qa2;
				qa.number = qnum;
				renderQA(qa);
			}
		},
		style=delStyle, pushedStyle=delPushedStyle)
	}
	group {
		item(questionStyle, onclick={renderMaths();}, hideArrow=true) {
			html("Q" + qa.number + ". " + qa.question)
			<span style="display:none">
				html(renderQA(qa))
			</span>
		}
		item(onclick={renderMaths();}, hideArrow=true) {
			block(answerStyle) {
				checkBox(qa.done, "Check answer", onchange = {
					renderQA(qa);
				})
			}
			when(qa.done) {
				answerBlock(qa)
			}
		}
	}
}

external sync function makeProblem(tid:String):Array<String>
external sync function initMapFromObject(map:Map<String,String>, obj:Object):void
external sync function initCoreTopicMap(map:Map<String,String>):void
external sync function initFurtherTopicMap(map:Map<String,String>):void
external sync function initStatsTopicMap(map:Map<String,String>):void

var max:Num = 0;

// Can return null if there's an error.
function makeQA(tid:String):QA {
	var q_and_A:Array<String> = makeProblem(tid);
	if(q_and_A == null)
		return null;

	var qa = QA();
	var qas:Collection<QA> = QA.all();
	foreach(item in qas) {
		max = Math.max(max, item.number);
	}
	qa.number = max + 1;
	qa.question = q_and_A[0];
	qa.answer = q_and_A[1];
	qa.topic = tid;  //q_and_A[2];
	if(q_and_A.length > 2) {
		qa.plotData = q_and_A[2];
	}
	qa.done = false;
	add(qa);
	
	return qa;
}


<javascript>

	__ns.coreTopicNames = {
		"C1":"Partial fractions",
		"C2":"Binomial theorem",
		"C3":"Polynomial integration",
		"C4":"Trig integration",
		"C5":"Scalar products",
		"C6":"3D Lines",
		"C7":"Inequalities",
		"C8":"Arithmetic progressions",
		"C9":"Factor theorem",
		"C10":"Quadratics",
		"C11":"Completing the square",
		"C12":"Binomial expansion",
		"C13":"Logarithms",
		"C14":"Stationary points",
		"C15":"Triangles",
		"C16":"Circles",
		"C17":"Trig equations",
		"C18":"Vector equations",
		"C19":"Implicit differentiation",
		"C20":"The chain rule",
		"C21":"The product rule",
		"C22":"The quotient rule",
		"C23":"Geometric progressions",
		"C24":"Modulus function",
		"C25":"Transforms of functions",
		"C26":"Composition of functions",
		"C27":"Parametric functions",
		"C270":"Implicit functions",
		"C28":"Integration",
		"C29":"Differential equations",
		"C30":"Powers"
	};

	__ns.furtherTopicNames = {
	    "F1":"Complex Arithmetic",
	    "F2":"Modulus Argument",
//	    "F3":"1st order DEs",
	    "F3a":"2nd order DEs",
	    "F4":"Rank 2 matrices",
	    "F5":"Taylor Series",
	    "F6":"Polar Coordinates",
	    "F7":"Rank 3 matrices",
	    "F8":"Further vectors",
	    "F9":"Newton-Raphson",
	    "F10":"Further inequalities",
	    "F11":"Integration by substitution",
	    "F12":"Figures of revolution",
	    "F13":"Matrix transformations"
	};
	
	__ns.statsTopicNames = {
		'S1':"Discrete Distributions",
		'S2':"Continuous Distributions",
		'S3':"Hypothesis Testing",
		'S4':"Confidence Intervals",
		'S5':"Chi Squared",
		'S6':"Product Moments"
	};
	
	__ns.initCoreTopicMap = function(map) {
		map.data = __ns.coreTopicNames;
	};

	__ns.initFurtherTopicMap = function(map) {
		map.data = __ns.furtherTopicNames;
	};

	__ns.initStatsTopicMap = function(map) {
		map.data = __ns.statsTopicNames;
	};

	__ns.makers = {
		"C1":makePartial,
		"C2":makeBinomial2,
		"C3":makePolyInt,
		"C4":makeTrigInt,
		"C5":makeVector,
		"C6":makeLines,
		"C7":makeIneq,
		"C8":makeAP,
		"C9":makeFactor,
		"C10":makeQuadratic,
		"C11":makeComplete,
		"C12":makeBinExp,
		"C13":makeLog,
		"C14":makeStationary,
		"C15":makeTriangle,
		"C16":makeCircle,
		"C17":makeSolvingTrig,
		"C18":makeVectorEq,
		"C19":makeImplicit,
		"C20":makeChainRule,
		"C21":makeProductRule,
		"C22":makeQuotientRule,
		"C23":makeGP,
		"C24":makeModulus,
		"C25":makeTransformation,
		"C26":makeComposition,
		"C27":makeParametric,
		"C270":makeImplicitFunction,
		"C28":makeIntegration,
		"C29":makeDE,
		"C30":makePowers,
		
		"F1":makeCArithmetic,
	    "F2":makeCPolar,
//	    "F3":makeDESepHard,
	    "F3a":makeDETwoHard,
	    "F4":makeMatrix2,
	    "F5":makeTaylor,
	    "F6":makePolarSketch,
	    "F7":makeMatrix3,
	    "F8":makeFurtherVector,
	    "F9":makeNewtonRaphson,
	    "F10":makeFurtherIneq,
	    "F11":makeSubstInt,
	    "F12":makeRevolution,
	    "F13":makeMatXforms,

		'S1':makeDiscreteDistn,
		'S2':makeContinDistn,
		'S3':makeHypTest,
		'S4':makeConfidInt,
		'S5':makeChiSquare,
		'S6':makeProductMoment
	};

	__ns.makeProblem = function(tid) {
		try
		{
			return __ns.makers[tid]();
		}
		catch(err)
		{
			console.log(err.message);
			alert("Question creation failed, please try again!");
			return null;
		}
	};
</javascript>
