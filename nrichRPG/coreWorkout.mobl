module nrichRPG::coreWorkout

import mobl
import mobl::ui::generic
import nrichRPG::questionAnswer
import mathJAX
import plot

load nrichRPG/problems.js
load nrichRPG/helpers.js
load nrichRPG/fractions.js
load nrichRPG/polys.js 
load nrichRPG/fpolys.js
load nrichRPG/complex.js
load nrichRPG/guessExact.js
load nrichRPG/stats.js

// core exercises


control qaItem(qa:QA) {
	checkBox(qa.done, label = "" + qa.number + ". " + qa.topic)
	contextMenu() {
		button("Delete", onclick={
			remove(qa);
		})
		button("Show", onclick={
			showQA(qa);
		})
	}
}

style helpStyle {
	background-color:#FFFFFF;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	font-size: 14px;
	color: #333388;
	padding:10px;
	word-break: normal;
}

style deleteStyle {
	//background-color:#8888FF;
	padding:10px;
	padding-right: 2px;
	float: right;
}

screen coreWorkoutHome() {
	
	var qCount:Num = QA.all().count()

 	header("Mathmo Core") {
		button("Add", onclick={ addQA(); qCount = qCount + 1;})
	}
	
	group {
		when(qCount == 0) {
			item(helpStyle) {
				html("Your personal workout. Touch [Add] to create a question on one of your chosen topics. Your questions will be preserved until you delete them.")
			}
			/*
			item(onclick={randomQ(5, 1000);qCount = qCount + 5;}) { // 1000 means any topic
				label("5 random questions")
			}
			item(onclick={randomQ(5, 100);qCount = qCount + 5;}) { 
				label("5 on algebra")
			}
			item(onclick={randomQ(5, 200);qCount = qCount + 5;}) { 
				label("5 curve sketches")
			}
			item(onclick={randomQ(5, 300);qCount = qCount + 5;}) { 
				label("5 geometry")
			}
			item(onclick={randomQ(5, 400);qCount = qCount + 5;}) { 
				label("5 sequences & series")
			}
			item(onclick={randomQ(5, 500);qCount = qCount + 5;}) { 
				label("5 on vectors")
			}
			item(onclick={randomQ(5, 600);qCount = qCount + 5;}) { 
				label("5 differentiation")
			}
			item(onclick={randomQ(5, 700);qCount = qCount + 5;}) { 
				label("5 integration")
			}
			item(onclick={randomQ(5, 29);qCount = qCount + 5;}) { 
				label("5 diff equations")
			}
			*/
		}
		list(qa in QA.all() order by number asc) {
			item(/* onclick={showQA(qa);}, hideArrow=true */) { 
				qaItem(qa) 
			}
		}
		item(style=deleteStyle, hideArrow=true) {
			button("Delete All", onclick = {QA.all().destroyAll(); qCount = 0;})
		}
	}
}

function randomQ(n:Num, topicId:Num):void
{
	foreach(i in range(0,n)) {
		var qa = QA();
		makeQA(qa, topicId);
	}
}

screen addQA() {
	var qa = QA()
	
	header("Choose type") {
		backButton() 
	}
	group {
		item(onclick = {makeQA(qa,1000); screen return;}) {
			label("Random")
		}
		item(onclick = {addAlgebra(qa); screen return;}) {
			label("Algebraic")
		}
		item(onclick = {addCurveSketch(qa); screen return;}) {
			label("Curve Sketching")
		}
		item(onclick = {addGeometry(qa); screen return;}) {
			label("Geometry")
		}
		item(onclick = {addSequencesAndSeries(qa); screen return;}) {
			label("Sequences & Series")
		}
		item(onclick = {addVectors(qa); screen return;}) {
			label("Vectors")
		}
		item(onclick = {addDifferentiation(qa); screen return;}) {
			label("Differentiation")
		}
		item(onclick = {addIntegration(qa); screen return;}) {
			label("Integration")
		}
		item(onclick = {addDifferentialEquations(qa); screen return;}) {
			label("Differential Equations")
		}
	}
}
 
screen addAlgebra(qa:QA) {
	header("Algebraic") {
		backButton()
	}
	group {
		item(onclick = {makeQA(qa, 100); screen return;}) {
			label("Random")
		}
		item(onclick = {makeQA(qa, 10); screen return;}) {
         	label("Quadratic Equations")
        }
		item(onclick = {makeQA(qa, 11); screen return;}) {
         	label("Completing the square")
        }
		item(onclick = {makeQA(qa, 7); screen return;}) {
         	label("Inequalities")
        }
		item(onclick = {makeQA(qa, 9); screen return;}) {
         	label("Factor Theorem")
        }
		item(onclick = {makeQA(qa, 1); screen return;}) {
         	label("Partial Fractions")
        }
		item(onclick = {makeQA(qa, 30); screen return;}) {
         	label("Powers")
        }
		item(onclick = {makeQA(qa, 13); screen return;}) {
         	label("Logarithms")
        }
		item(onclick = {makeQA(qa, 17); screen return;}) {
         	label("Solving Trig Equations")
        }
	}
}

screen addCurveSketch(qa:QA) {
	header("Curve Sketching") {
		backButton()
	}
	group {
		item(onclick = {makeQA(qa, 200); screen return;}) {
			label("Random")
		}
		item(onclick = {makeQA(qa, 24); screen return;}) {
         	label("Modulus Function")
        }
		item(onclick = {makeQA(qa, 25); screen return;}) {
         	label("Transformations of functions")
        }
		item(onclick = {makeQA(qa, 26); screen return;}) {
         	label("Composition of functions")
        }
		item(onclick = {makeQA(qa, 270); screen return;}) {
         	label("Implicit functions")
        }
		item(onclick = {makeQA(qa, 27); screen return;}) {
         	label("Parametric functions")
        }
	}
}

screen addGeometry(qa:QA) {
	header("Geometry") {
		backButton()
	}
	group {
		item(onclick = {makeQA(qa, 300); screen return;}) {
			label("Random")
		}
		item(onclick = {makeQA(qa, 15); screen return;}) {
         	label("Triangles")
        }
		item(onclick = {makeQA(qa, 16); screen return;}) {
         	label("Circles")
        }
		item(onclick = {makeQA(qa, 6); screen return;}) {
         	label("Lines in 3D")
        }
	}
}

screen addSequencesAndSeries(qa:QA) { 
	header("Sequences and Series") {
		backButton()
	}
	group {
		item(onclick = {makeQA(qa, 400); screen return;}) {
			label("Random")
		}
		item(onclick = {makeQA(qa, 8); screen return;}) {
         	label("Arithmetic Progressions")
        }
		item(onclick = {makeQA(qa, 12); screen return;}) {
         	label("Binomial Expansion")
        }
		item(onclick = {makeQA(qa, 23); screen return;}) {
         	label("Geometric Progressions")
        }
		item(onclick = {makeQA(qa, 2); screen return;}) {
         	label("Binomial Theorem")
        }
    }
}

screen addVectors(qa:QA) {
	header("Vectors") {
		backButton()
	}
	group {
		item(onclick = {makeQA(qa, 500); screen return;}) {
			label("Random")
		}
		item(onclick = {makeQA(qa, 5); screen return;}) {
         	label("Scalar products")
        }
		item(onclick = {makeQA(qa, 18); screen return;}) {
         	label("Vector equation of lines")
        }
    }
}

screen addDifferentiation(qa:QA) {
	header("Differentiation") {
		backButton()
	}
	group {
		item(onclick = {makeQA(qa, 600); screen return;}) {
			label("Random")
		}
		item(onclick = {makeQA(qa, 14); screen return;}) {
         	label("Stationary Points")
        }
		item(onclick = {makeQA(qa, 20); screen return;}) {
         	label("Chain Rule")
        }
		item(onclick = {makeQA(qa, 21); screen return;}) {
         	label("Product Rule")
        }
		item(onclick = {makeQA(qa, 22); screen return;}) {
         	label("Quotient Rule")
        }
		item(onclick = {makeQA(qa, 19); screen return;}) {
         	label("Implicit Differentiation")
        }
    }	
}

screen addIntegration(qa:QA) {
	header("Integration") {
		backButton()
	}
	group {
		item(onclick = {makeQA(qa, 700); screen return;}) {
			label("Random")
		}
		item(onclick = {makeQA(qa, 28); screen return;}) {
         	label("Integration")
        }
		item(onclick = {makeQA(qa, 3); screen return;}) {
         	label("Polynomial Integration")
        }
		item(onclick = {makeQA(qa, 4); screen return;}) {
         	label("Trig Integration")
        }
    }	
}

screen addDifferentialEquations(qa:QA) {
	header("Differential Equations") {
		backButton()
	}
	group {
		/* not yet
		item(onclick = {makeQA(qa, 800); screen return;}) {
			label("Random")
		}
		*/
		item(onclick = {makeQA(qa, 29); screen return;}) {
         	label("Differential Equations")
        }
    }	
}

style questionStyle {
	background-color:#FFFFFF;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	font-size: 17px;
	color: #000000;
	padding:10px;
	word-break: normal;
}

style answerStyle {
	background-color:#EEEEFF;
	border: 1px solid #CCCCCC;
	border-left-width:0px;
	border-right-width:0px;
	font-size: 17px;
	color: #338833;
	padding:10px;
	word-break: normal;
}

style plotStyle {
	width : 300px;
	height : 300px;
}

screen showQA(qa:QA) {
	header(qa.topic) {
		script {
			renderMaths();
			sleep(0);
			if(qa.done && qa.answer == "%GRAPH%") {
				var jsonData:JSON = JSON.parse(qa.plotData);
				lineChart("corePlotArea", jsonData);
			}
		}
		backButton()
	}
	group {
		item(questionStyle) {
			html(qa.question)
		}
		when(!qa.done) {
			item {
				checkBox(qa.done, label = "Check answer", onchange = {
					renderMaths();
					sleep(0);
					if(qa.answer == "%GRAPH%") {
						var jsonData:JSON = JSON.parse(qa.plotData);
						lineChart("corePlotArea", jsonData);
					}
				})
			}
		}
		else {
			when(qa.answer != "%GRAPH%") {
				item(answerStyle) {
					html(qa.answer)
				}
			}
			else {
				item {
					plot("corePlotArea", plotStyle)
				}
			} 
		}
	}
}

external sync function randomCoreQA(topic:String):Array<String>

external sync function makeProblem(qid:Num):Array<String>


var max:Num = 0;


function makeQA(qa:QA, n:Num):void {
	var qas:Collection<QA> = QA.all();
	foreach(item in qas) {
		max = Math.max(max, item.number);
	}
	qa.number = max + 1;
	var q_and_A:Array<String> = makeProblem(n);
	qa.question = q_and_A[0];
	qa.answer = q_and_A[1];
	qa.topic = q_and_A[2];
	if(q_and_A.length > 3) {
		qa.plotData = q_and_A[3];
	}
	qa.done = false;
	add(qa);
}

<javascript>
	__ns.makeProblem = function(n) {
	    if(n === 1000)
	    {
	        n=1+Math.floor(Math.random()*29);
			n=n;
	    }
	
		if(n === 100)
		    {
		        n=pickrand(10, 11, 7, 9, 1, 30, 13, 17);
		    }
		
		if(n === 200)
		    {
		        n=pickrand(24, 25, 26, 27, 270);
		    }
		
		if(n === 300)
		    {
		        n=pickrand(15,16,6);
		    }
		if(n === 400)
		    {
		        n=pickrand(8, 12, 23, 2);
		    }
		if(n === 500)
		    {
		        n=pickrand(5, 18);
		    }
		if(n === 600)
		    {
		        n=pickrand(14,20,21,22,19);
		    }
		if(n === 700)
		    {
		        n=pickrand(28,3,4);
		    }
		
	    switch (n)
	    {
	        case 1:
	            var qa=makePartial();
	   			qa.push("Partial Fractions");
	        break;
	        
	        case 2:
	            var qa=makeBinomial2();
	   			qa.push("Binomial Theorem");
	        break;
	        
	        case 3:
	            var qa=makePolyInt();
	   			qa.push("Polynomial Integration");
	        break;
	        
	        case 4:
	            var qa=makeTrigInt();
	   			qa.push("Trig Integration");
	        break;
	        
	        case 5:
	            var qa=makeVector();
	   			qa.push("Scalar products");
	        break;
	        
	        case 6:
	            var qa=makeLines();
	   			qa.push("3D Lines");
	        break;
	        
	        case 7:
	            var qa=makeIneq();
	   			qa.push("Inequalities");
	        break;
	        
	        case 8:
	            var qa=makeAP();
	   			qa.push("Arithmetic Progressions");
	        break;
	        
	        case 9:
	            var qa=makeFactor();
	   			qa.push("Factor Theorem");
	        break;
	        
	        case 10:
	            var qa=makeQuadratic();
	   			qa.push("Quadratics");
	        break;
	        
	        case 11:
	            var qa=makeComplete();
	   			qa.push("Completing the Square");
	        break;
	        
	        case 12:
	            var qa=makeBinExp();
	   			qa.push("Binomial Expansion");
	        break;
	        
	        case 13:
	            var qa=makeLog();
	   			qa.push("Logarithms");
	        break;
	        
	        case 14:
	            var qa=makeStationary();
	   			qa.push("Stationary points");
	        break;
	        
	        case 15:
	            var qa=makeTriangle();
	   			qa.push("Triangles");
	        break;
	        
	        case 16:
	            var qa=makeCircle();
	   			qa.push("Circles");
	        break;
	        
	        case 17:
	            var qa=makeSolvingTrig();
	   			qa.push("Trig Equations");
	        break;
	        
	        case 18:
	            var qa=makeVectorEq();
	   			qa.push("Vector Equations");
	        break;
	        
	        case 19:
	            var qa=makeImplicit();
	   			qa.push("Implicit differentiation");
	        break;
	        
	        case 20:
	            var qa=makeChainRule();
	   			qa.push("The chain rule");
	        break;
	        
	        case 21:
	            var qa=makeProductRule();
	   			qa.push("The product rule");
	        break;
	        
	        case 22:
	            var qa=makeQuotientRule();
	   			qa.push("The quotient rule");
	        break;
	        
	        case 23:
	            var qa=makeGP();
	   			qa.push("Geometric progressions");
	        break;
	        
	        case 24:
	            var qa=makeModulus();
	   			qa.push("Modulus function");
	        break;
	        
	        case 25:
	            var qa=makeTransformation();
	   			qa.push("Transformations of functions");
	        break;
	        
	        case 26:
	            var qa=makeComposition();
	   			qa.push("Composition of functions");
	        break;
	        
	        case 27:
	            var qa=makeParametric();
	   			qa.push("Parametric functions");
	        break;
	
	        case 270:
	            var qa=makeImplicitFunction();
	   			qa.push("Implicit functions");
	        break;
	        
	        case 28:
	            var qa=makeIntegration();
	   			qa.push("Integration");
	        break;
	        
	        case 29:
	            var qa=makeDE();
	   			qa.push("Differential Equations");
	        break;
	        
	        case 30:
	            var qa=makePowers();
	   			qa.push("Powers");
	        break;
	        
	        default:
	            alert("invalid qid" + n);
	        break;
	    }
	    return qa;
	};
</javascript>
